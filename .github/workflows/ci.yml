name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-lint-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-lint-

    - name: Download dependencies
      run: go mod download

    - name: Generate Swagger docs
      run: make swag

    - name: Run golangci-lint
      run: make lint

    - name: Check formatting
      run: |
        go install mvdan.cc/gofumpt@latest
        if [ "$(gofumpt -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted. Run 'gofumpt -w .'"
          gofumpt -l .
          exit 1
        fi

    - name: Check go mod tidy
      run: |
        make tidy
        if [ -n "$(git status --porcelain)" ]; then
          echo "go.mod or go.sum is not tidy"
          exit 1
        fi

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: awesome
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-test-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-test-

    - name: Download dependencies
      run: go mod download

    - name: Generate Swagger docs
      run: make swag

    - name: Setup test database
      env:
        PGPASSWORD: postgres
      run: |
        # Install PostgreSQL client
        sudo apt-get update
        sudo apt-get install -y postgresql-client
        
        # Install migrate tool
        go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@latest
        
        # Wait for postgres and run migrations
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for postgres..."
          sleep 2
        done
        
        # Run migrations
        migrate -path ./internal/db/migrations -database "postgres://postgres:postgres@localhost:5432/awesome?sslmode=disable" up

    - name: Run tests with coverage
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_NAME: awesome
        DB_SSL_MODE: disable
        SERVER_PORT: 8080
      run: make test-coverage

    - name: Upload coverage
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          coverage.out
          coverage.html

    - name: Coverage Summary
      run: |
        echo "## Test Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        go tool cover -func=coverage.out >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
